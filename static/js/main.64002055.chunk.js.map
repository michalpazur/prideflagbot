{"version":3,"sources":["redux/modules/theme.js","static/icon.jpg","App.js","redux/store.js","index.js"],"names":["themeConstants","themeAction","theme","hasChanged","type","initialState","themeReducer","state","action","useStyles","makeStyles","appbar","backdropFilter","backgroundColor","palette","background","paper","toolbar","padding","avatar","marginRight","name","fontWeight","fontSize","color","text","primary","spacer","flexGrow","root","minHeight","default","button","twitter","main","App","classes","useSelector","dispatch","useDispatch","Fragment","AppBar","elevation","className","Toolbar","Avatar","src","icon","Typography","Button","size","variant","onClick","component","href","target","rootReducer","combineReducers","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","devToolsEnhancer","subscribe","_","throttle","stringify","setItem","saveState","getState","configureStore","Wrapper","children","defaultTheme","useTheme","prefersDarkMode","useMediaQuery","useEffect","muiTheme","useMemo","createTheme","secondary","typography","fontFamily","join","shape","borderRadius","overrides","MuiTypography","transition","transitions","create","duration","standard","MuiButton","sizeSmall","minWidth","ThemeProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64002055.chunk.js","sourcesContent":["export const themeConstants = {\r\n  CHANGE_THEME: \"CHANGE_THEME\",\r\n};\r\n\r\nexport const themeAction = {\r\n  changeTheme: ({ theme, hasChanged }) => ({\r\n    type: themeConstants.CHANGE_THEME,\r\n    theme,\r\n    hasChanged,\r\n  }),\r\n};\r\n\r\nconst initialState = {\r\n  hasChanged: false,\r\n  theme: \"light\",\r\n};\r\n\r\nconst themeReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case themeConstants.CHANGE_THEME: {\r\n      return {\r\n        ...state,\r\n        theme: action.theme,\r\n        hasChanged: action.hasChanged,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default themeReducer;\r\n","export default __webpack_public_path__ + \"static/media/icon.6d1c8638.jpg\";","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport LightThemeIcon from \"@material-ui/icons/WbSunnyOutlined\";\r\nimport DarkThemeIcon from \"@material-ui/icons/Brightness2Outlined\";\r\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { themeAction } from \"./redux/modules/theme\";\r\nimport icon from \"./static/icon.jpg\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appbar: {\r\n    backdropFilter: \"blur(20px)\",\r\n    backgroundColor: theme.palette.background.paper + \"B7\",\r\n  },\r\n  toolbar: {\r\n    padding: \"0px 150px\",\r\n  },\r\n  avatar: {\r\n    marginRight: \"20px\",\r\n  },\r\n  name: {\r\n    fontWeight: \"bold\",\r\n    fontSize: \"18px\",\r\n    color: theme.palette.text.primary,\r\n  },\r\n  spacer: {\r\n    flexGrow: \"1\",\r\n  },\r\n  root: {\r\n    minHeight: \"100vh\",\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  button: {\r\n    marginRight: \"10px\",\r\n  },\r\n  twitter: {\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\nconst App = () => {\r\n  const classes = useStyles();\r\n  const theme = useSelector((state) => state.themeReducer.theme);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar elevation={3} className={classes.appbar} color=\"transparent\">\r\n        <Toolbar className={classes.toolbar}>\r\n          <Avatar src={icon} className={classes.avatar} />\r\n          <Typography className={classes.name}>PrideFlagBot</Typography>\r\n          <div className={classes.spacer} />\r\n          <Button\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            className={classes.button}\r\n            onClick={() =>\r\n              dispatch(\r\n                themeAction.changeTheme({\r\n                  theme: theme === \"dark\" ? \"light\" : \"dark\",\r\n                  hasChanged: true,\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {theme === \"light\" ? <LightThemeIcon /> : <DarkThemeIcon />}\r\n          </Button>\r\n          <Button\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            component=\"a\"\r\n            href=\"https://twitter.com/prideflagbot\"\r\n            target=\"_blank\"\r\n          >\r\n            <TwitterIcon className={classes.twitter} />\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div className={classes.root} />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { devToolsEnhancer } from \"redux-devtools-extension\";\r\nimport _ from \"lodash\";\r\n\r\nimport themeReducer from \"./modules/theme\";\r\n\r\nconst rootReducer = combineReducers({\r\n  themeReducer: themeReducer,\r\n});\r\n\r\nconst saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem(\"state\", serializedState);\r\n  } catch (err) {\r\n    return;\r\n  }\r\n};\r\n\r\nconst loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem(\"state\");\r\n\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const configureStore = () => {\r\n  const store = createStore(rootReducer, loadState(), devToolsEnhancer());\r\n  store.subscribe(\r\n    _.throttle(() => {\r\n      saveState({\r\n        themeReducer: store.getState().themeReducer,\r\n      });\r\n    }, 1000)\r\n  );\r\n\r\n  return store;\r\n};\r\n\r\nexport const store = configureStore();\r\n","import React, { useEffect, useMemo } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider, useSelector, useDispatch } from \"react-redux\";\nimport { createTheme, useTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { store } from \"./redux/store\";\nimport { themeAction } from \"./redux/modules/theme\";\n\nconst Wrapper = ({ children }) => {\n  const dispatch = useDispatch();\n  const theme = useSelector((state) => state.themeReducer.theme);\n  const defaultTheme = useTheme();\n  const hasChanged = useSelector((state) => state.themeReducer.hasChanged);\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n\n  useEffect(() => {\n    if (!hasChanged) {\n      dispatch(\n        themeAction.changeTheme({\n          theme: prefersDarkMode ? \"dark\" : \"light\",\n          hasChanged: false,\n        })\n      );\n    }\n  }, [prefersDarkMode]);\n\n  const muiTheme = useMemo(\n    () =>\n      createTheme({\n        palette: {\n          type: theme,\n          background: {\n            paper: theme === \"light\" ? \"#FFFFFF\" : \"#0A1929\",\n            default: theme === \"light\" ? \"#F3F6F9\" : \"#001E3C\",\n          },\n          primary: {\n            main: theme === \"light\" ? \"#007FFF\" : \"#3399FF\",\n          },\n          text: {\n            main: theme === \"light\" ? \"#0A1929\" : \"#FFFFFF\",\n            secondary: theme === \"light\" ? \"#46505A\" : \"#AAB4BE\",\n          },\n        },\n        typography: {\n          fontFamily: ['\"IBM Plex Sans\"', \"Roboto\", \"sans-serif\"].join(\", \"),\n        },\n        shape: {\n          borderRadius: \"10px\",\n        },\n        overrides: {\n          MuiTypography: {\n            root: {\n              transition: defaultTheme.transitions.create(\"color\", {\n                duration: defaultTheme.transitions.duration.standard,\n              }),\n            },\n          },\n          MuiButton: {\n            sizeSmall: {\n              padding: \"5px 10px\",\n              minWidth: \"unset\",\n            },\n          },\n        },\n      }),\n    [theme]\n  );\n\n  return <ThemeProvider theme={muiTheme}>{children}</ThemeProvider>;\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Wrapper>\n        <App />\n      </Wrapper>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}